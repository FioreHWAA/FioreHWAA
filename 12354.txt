import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.function.Consumer;

public class ConsumerTest {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        List<String> strings = new ArrayList<>();

        // 사용자로부터 문자열 입력 받기 (빈 줄 또는 EOF로 종료)
        System.out.println("문자열 여러 줄 입력:");

        while (scanner.hasNextLine()) {
            String input = scanner.nextLine();
            if (input.isEmpty()) { // 빈 줄 입력 시 종료
                break;
            }
            strings.add(input);
        }

        // 1. 첫 글자만 출력하는 Consumer 람다식
        Consumer<String> firstCharConsumer = str -> {
            if (str != null && !str.isEmpty()) {
                System.out.print(str.charAt(0));  // 첫 글자 출력
            }
        };

        // 2. 마지막 글자만 출력하는 Consumer 람다식
        Consumer<String> lastCharConsumer = str -> {
            if (str != null && !str.isEmpty()) {
                System.out.print(str.charAt(str.length() - 1));  // 마지막 글자 출력
            }
        };

        // 3. 첫 글자와 마지막 글자를 출력하는 복합 Consumer 람다식
        Consumer<String> firstAndLastCharConsumer = firstCharConsumer.andThen(lastCharConsumer);

        // 4. 리스트의 첫 번째 문자열에 대해 각 Consumer 람다식 적용
        if (!strings.isEmpty()) {
            String firstString = strings.get(0);

            // 첫 글자 출력 후 새 줄
            firstCharConsumer.accept(firstString);
            System.out.println();

            // 마지막 글자 출력 후 새 줄
            lastCharConsumer.accept(firstString);
            System.out.println();

            // 첫 글자와 마지막 글자 출력 후 새 줄
            firstAndLastCharConsumer.accept(firstString);
            System.out.println();
        }

        // 5. 리스트의 각 문자열에 대해 첫 번째 Consumer 람다식 적용
        
        strings.forEach(firstCharConsumer);
        System.out.println();  // 줄 바꿈

        scanner.close();
    }
}


-----

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.function.Consumer;

import java.util.Scanner;
import java.util.function.Function;

public class FunctionTest {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // 사용자로부터 double 값을 입력받는다.
        System.out.print("0.0 이상 소수 입력: ");
        double input = scanner.nextDouble();

        // 1. 제곱근을 구하는 Function 람다식
        Function<Double, Double> sqrtFunction = Math::sqrt;

        // 2. 반올림한 값을 구하는 Function 람다식
        Function<Double, Long> roundFunction = Math::round;

        // 3. 제곱근을 구한 후 반올림하는 복합 Function
        Function<Double, Long> sqrtAndRoundFunction = sqrtFunction.andThen(roundFunction);

        // 4. 복합 Function을 이용해 입력받은 숫자의 제곱근을 반올림하여 출력
        long result = sqrtAndRoundFunction.apply(input);

        // 결과 출력
        System.out.println(result);

        scanner.close();
    }
}


-----

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;
import java.util.function.Predicate;
import java.util.function.Function;
import java.util.function.Consumer;
import java.util.function.Supplier;

public class Lambdas {

    @Test
    public void testMethods() {
        try {
            // Predicate 테스트 1
            Predicate<String> pred = s -> s.length() > 4;
            assertTrue(pred.test("abcde"));
            assertFalse(pred.test("abcd"));

            // Predicate 테스트 2
            Predicate<String> pred2 = String::isEmpty;
            assertTrue(pred2.test(""));
            assertFalse(pred2.test("a"));

            // Function 테스트 1
            Function<String, String> func = s -> "(" + s + ")";
            assertEquals("(abc)", func.apply("abc"));

            // Function 테스트 2
            Function<String, String> func2 = String::toUpperCase;
            assertEquals("ABC", func2.apply("abc"));

            // Consumer 테스트 1
            Consumer<StringBuilder> cons = sb -> sb.append("abc");
            StringBuilder sb = new StringBuilder("xyz");
            cons.accept(sb);
            assertEquals("xyzabc", sb.toString());

            // Supplier 테스트 1
            Supplier<StringBuilder> sup = () -> new StringBuilder("abc");
            assertEquals("abc", sup.get().toString());

            System.out.println("Pass"); // 모든 테스트가 성공하면 Pass 출력
        } catch (AssertionFailedError e) {
            System.err.println("Test failed: " + e.getMessage());
        }
    }

    // 예시 메서드들 (실제 테스트에 맞춰 적절하게 구현)
    public void a_predicate1() {
        // Predicate 관련 메서드 예시
    }

    public void a_predicate2() {
        // Predicate 관련 메서드 예시
    }

    public void a_predicate3() {
        // Predicate 관련 메서드 예시
    }

    public void a_predicate4() {
        // Predicate 관련 메서드 예시
    }

    public void a_predicate5() {
        // Predicate 관련 메서드 예시
    }

    public void b_function1() {
        // Function 관련 메서드 예시
    }

    public void b_function2() {
        // Function 관련 메서드 예시
    }

    public void b_function3() {
        // Function 관련 메서드 예시
    }

    public void b_function4() {
        // Function 관련 메서드 예시
    }

    public void c_consumer1() {
        // Consumer 관련 메서드 예시
    }

    public void c_consumer2() {
        // Consumer 관련 메서드 예시
    }

    public void c_consumer3() {
        // Consumer 관련 메서드 예시
    }

    public void c_consumer4() {
        // Consumer 관련 메서드 예시
    }

    public void d_supplier1() {
        // Supplier 관련 메서드 예시
    }

    public void d_supplier2() {
        // Supplier 관련 메서드 예시
    }

    public void d_supplier3() {
        // Supplier 관련 메서드 예시
    }

    public void e_bifunction1() {
        // BiFunction 관련 메서드 예시
    }

    public void e_bifunction2() {
        // BiFunction 관련 메서드 예시
    }

    public void e_bifunction3() {
        // BiFunction 관련 메서드 예시
    }

    public void f_runnable1() {
        // Runnable 관련 메서드 예시
    }

    public void g_boundMethodRef1() {
        // Method Reference 관련 메서드 예시
    }

    public void g_boundMethodRef2() {
        // Method Reference 관련 메서드 예시
    }
}


-----

import java.util.Comparator;
import java.util.function.IntBinaryOperator;

public class Comparators {
    // Your comparator methods here, e.g., comparator01(), comparator02(), etc.
    
    public void comparator01() {
        // implementation
    }

    public void comparator02() {
        // implementation
    }

    public void comparator03() {
        // implementation
    }

    public void comparator04() {
        // implementation
    }

    public void comparator05() {
        // implementation
    }

    public void comparator06() {
        // implementation
    }

    public void comparator07() {
        // implementation
    }

    public void comparator08() {
        // implementation
    }

    public void comparator09() {
        // implementation
    }

    public void comparator10() {
        // implementation
    }

    public static void main(String[] args) {
        Comparators sol = new Comparators();
        try {
            sol.comparator01();
            sol.comparator02();
            sol.comparator03();
            sol.comparator04();
            sol.comparator05();
            sol.comparator06();
            sol.comparator07();
            sol.comparator08();
            sol.comparator09();
            sol.comparator10();
        } catch (AssertionFailedError e) {
            e.printStackTrace();
        }
        System.out.println("Pass");
    }
}


-----

import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.io.BufferedReader;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class Streams {

    @Test
    public void d1_upcaseOddLengthWords() {
        List<String> input = List.of("alfa", "bravo", "charlie", "delta", "echo", "foxtrot");
        List<String> result = input.stream()
                                   .filter(word -> word.length() % 2 == 1)
                                   .map(String::toUpperCase)
                                   .collect(Collectors.toList());
        assertEquals(List.of("BRAVO", "CHARLIE", "DELTA", "FOXTROT"), result);
    }

    @Test
    public void d2_joinStreamRange() {
        List<String> input = List.of("alfa", "bravo", "charlie", "delta", "echo", "foxtrot");
        String result = input.stream()
                             .skip(2) // Start from the third word
                             .limit(3) // Take three words
                             .map(word -> String.valueOf(word.charAt(1))) // Extract the second letter
                             .collect(Collectors.joining(",")); // Join with commas
        assertEquals("h,e,c", result);
    }

    @Test
    public void d3_countLinesInFile() throws IOException {
        long count = reader.lines().count(); // Count the number of lines in the file
        assertEquals(14, count);
    }

    @Test
    public void d4_findLengthOfLongestLine() throws IOException {
        int longestLength = reader.lines()
                                  .mapToInt(String::length)
                                  .max()
                                  .orElse(-1); // Handle empty file case
        assertEquals(53, longestLength);
    }

    @Test
    public void d5_findLongestLine() throws IOException {
        String longest = reader.lines()
                               .max(Comparator.comparingInt(String::length))
                               .orElse(null); // Handle empty file case
        assertEquals("Feed'st thy light's flame with self-substantial fuel,", longest);
    }

    @Test
    public void d6_selectLongestWords() {
        List<String> input = List.of("alfa", "bravo", "charlie", "delta", "echo", "foxtrot", "golf", "hotel");
        int maxLength = input.stream().mapToInt(String::length).max().orElse(0); // Find max word length
        List<String> result = input.stream()
                                   .filter(word -> word.length() == maxLength)
                                   .collect(Collectors.toList());
        assertEquals(List.of("charlie", "foxtrot"), result);
    }

    @Test
    public void d7_selectByLengthAndPosition() {
        List<String> input = List.of("alfa", "bravo", "charlie", "delta", "echo", "foxtrot", "golf", "hotel");
        List<String> result = IntStream.range(0, input.size())
                                       .filter(index -> input.get(index).length() > index)
                                       .mapToObj(input::get)
                                       .collect(Collectors.toList());
        assertEquals(List.of("alfa", "bravo", "charlie", "delta", "foxtrot"), result);
    }

    private BufferedReader reader;

    @BeforeEach
    public void z_setUpBufferedReader() throws IOException {
        reader = Files.newBufferedReader(Paths.get("sonnet.txt"), StandardCharsets.UTF_8);
    }

    @AfterEach
    public void z_closeBufferedReader() throws IOException {
        reader.close();
    }
}
